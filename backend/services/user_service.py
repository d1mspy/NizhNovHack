from uuid import UUID
from typing import Tuple

from repositories.db.user_repository import user_repository
from schemas.schemas import UserDTO, UserLogin
from ai_services.career import ai_service
from typing import List
from utils.concatination import user_to_single_line
from schemas.schemas import Skills

class UserService:
    def __init__(self):
        self.repository = user_repository
        
    async def put_user(self, user: UserDTO) -> UUID:
        return await self.repository.put_user(user)
    
    async def check_user(self, user: UserLogin) -> Tuple[bool, UUID]:
        return await user_repository.exists_by_full_name(user.first_name, user.last_name)
    
    async def get_all_users(self) -> List[UserDTO]:
        return await self.repository.get_all_users()
    
    async def get_user_by_id(self, id: str) -> UserDTO:
        return await self.repository.get_user_by_id(id)
    
    async def update_user_info(self, user: UserDTO, id: str) -> UserDTO:
        return await self.repository.update_user_info(
            id,
            first_name=user.first_name,
            last_name=user.last_name,
            sex=user.sex,
            birth_date=user.birth_date,
            current_position=user.current_position,
            education=user.education, 
            experience_years=user.experience_years, 
            experience_months=user.experience_months,
            experience_description=user.experience_description,
            hard_skills=user.hard_skills,
        )
    async def chat_llm(self, id, text_message):
        return await ai_service.process_message(user_id=id, message=text_message)

    async def start_chat_llm(self, id):
        ai_service.clear_history(user_id=id)
        user_info = await self.repository.get_user_by_id(id=id)
        user_info_one_line = "–¢—ã hr –ø–æ–º–æ—â–Ω–∏–∫, —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ –ø–æ–º–æ—á—å —á–µ–ª–æ–≤–µ–∫—É —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏, —Ç—ã –ø–æ–ª—É—á–∏—à—å –æ –Ω–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –ø–æ–º–æ–≥–∏ –µ–º—É —Å—Ç–∞—Ç—å –ª—É—á—à–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º"
        user_info_one_line += await user_to_single_line(user_info)
        return await ai_service.process_message(user_id=id, message=user_info_one_line)
    
    async def generate_skills(self, id):
        ai_service.clear_history(user_id=id)
        user_info = await self.repository.get_user_by_id(id=id)
        user_info_one_line = """–¢—ã hr –ø–æ–º–æ—â–Ω–∏–∫, —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ —Ä–µ–∑—é–º–µ —á–µ–ª–æ–≤–µ–∫–∞ –≤—ã–¥–µ–ª–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –Ω–∞–≤—ã–∫–∏: 1. –û–ø—ã—Ç (–≥–æ–¥—ã + –º–µ—Å—è—Ü—ã)

1.1üéö –£—Ä–æ–≤–µ–Ω—å –º–∞—Å—Ç–µ—Ä–∞ ‚Äî –æ—Ç—Ä–∞–∂–∞–µ—Ç —Å—É–º–º–∞—Ä–Ω—ã–π –æ–ø—ã—Ç.

1.2 üï∞ –í—ã–¥–µ—Ä–∂–∫–∞ ‚Äî –Ω–∞—Å–∫–æ–ª—å–∫–æ —Å—Ç–∞–±–∏–ª—å–Ω–æ –∏ –¥–æ–ª–≥–æ —á–µ–ª–æ–≤–µ–∫ ¬´–≤ –∏–≥—Ä–µ¬ª.

2. –¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø—ã—Ç–∞ / –ø–æ–∑–∏—Ü–∏—è

2.1 üõ† –§–æ–∫—É—Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ ‚Äî –æ—Ç—Ä–∞–∂–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–ò–Ω–∂–µ–Ω–µ—Ä–Ω—ã–π¬ª, ¬´–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π¬ª, ¬´–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π¬ª).

2.2 ‚ö°Ô∏è –°–∫–æ—Ä–æ—Å—Ç—å –∞–ø–≥—Ä–µ–π–¥–∞ ‚Äî –µ—Å–ª–∏ –≤–∏–¥–Ω–æ, —á—Ç–æ —á–∞—Å—Ç–æ –º–µ–Ω—è–ª —Ä–æ–ª–∏/–æ—Å–≤–∞–∏–≤–∞–ª –Ω–æ–≤–æ–µ.

3. –°—Ç—ç–∫ / —Ö–∞—Ä–¥-—Å–∫–∏–ª–ª—ã

3.1 üîß –ì–∏–±–∫–æ—Å—Ç—å —Å—Ç—ç–∫–∞ ‚Äî —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –Ω–∞–≤—ã–∫–æ–≤ (–æ–¥–∏–Ω —è–∑—ã–∫ vs. –º–Ω–æ–≥–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π).

3.2 üåê –ú—É–ª—å—Ç–∏–∫–ª–∞—Å—Å ‚Äî –µ—Å–ª–∏ —Å—Ç—ç–∫ —Ä–∞–∑–Ω—ã–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞, –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞).

4. –í–æ–∑—Ä–∞—Å—Ç / –ø–æ–ª
–ü–æ–ª –ª—É—á—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–º–æ–∂–µ—Ç –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞—Ç—å—Å—è –∫–∞–∫ –ª–∏—à–Ω–µ–µ).
–í–æ–∑—Ä–∞—Å—Ç –º–æ–∂–Ω–æ –º—è–≥–∫–æ –æ—Ç—Ä–∞–∑–∏—Ç—å –∫–∞–∫:

4.1 ‚è≥ –û–ø—ã—Ç —ç–ø–æ—Ö ‚Äî –Ω–∞—Å–∫–æ–ª—å–∫–æ ¬´—Å—Ç–∞—Ä—ã–π –≥–µ—Ä–æ–π¬ª –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å ¬´–Ω–æ–≤–∏—á–∫–æ–º¬ª.

–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ json, –ø–æ–ª—è —Å–ª–µ–¥—É—é—â–∏–µ: 'level', 'discipline','focus', 'speed', 'flexibility', 'multiclass', 'experience'"""
        user_info_one_line += await user_to_single_line(user_info)
        answer = await ai_service.process_message(user_id=id, message=user_info_one_line)
        ai_service.clear_history(user_id=id)
        print(answer)
        return Skills(dict(answer))
        
user_service = UserService()
